// 배열심화
// 배열 [1,2,3,4,5,6] 레퍼런스 타입
// 리스트 형태
// 인덱스의 순서로 해당 값에 접근할 수 있다.
// 우리는 1부터 숫자를 세는데
// 배열은 0에서 부터 숫자를 센다.
// 인덱스 0~배열의 길이까지

// 다른 언어에서 c,c++,c#등등
// 배열이 list타입이 있다.
// js에서는 Array타입이 있는데
// 사용자가 편하게 접근하기 위해서 조금 허술한 부분이 있다.
// js의 배열은 객체 0,1,2,3
// js의 배열안의 배열은 객체배열이다.

// 자바스크립트

let a = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9],
];
// 우리는 이중배열이라고 부른다.

// a[0] = [1,2,3]
// a[0][0]=[1,2,3]의 0번 인덱스
// 대부분 이중배열까지만 사용한다. 더 만들순 있지만

// 배열에는 length라는 키값이 있다.
// 배열의 총 길이를 알려줍니다.

// 길이: 1,2,3,4
// 인덱스:0,1,2,3

// 반복문에 숫자를 바로 이렇게 작성하게 되면
// 반복문의 반복 횟수를 동적으로 변경하기 힘들다.

// 길이가 변경되는 상황이 온다면 처음 정한 인덱스까지 이후로는 값을 가져올 수 없다.
// 배열의 길이가 변해도 length 키값으로 배열의 길이를 가져올 수 있다.
// 그럼 반복문을 정상적으로 배열의 길이만큼 반복 시킬 수 있다.
a.push([10, 11, 12]);
a.push([13]);
// push()함수=>배열 메소두
// 배열타입의 함수
// 함수도 값입니다.

for (let i = 0; i < a.length; i++) {
  for (let j = 0; j < a[i].length; j++) {
    console.log(a[i][j]);
  }
}

// 객체 생긴거 다시보자
// const 한번 선언하면 값 변경할 수 없다, 재선언 또한 안된다.
// 상수의 값
// object는 키와 값이 있다.
const obj = {
  // 익명함수=>이름이 없는 함수 메모
  push: function (num) {
    console.log("나는 obj 객체 안에 push라는 키값의 있는 함수야");
    console.log(`${num}을 매개변수로 받았어!`);
  },
};

obj.push(1);

let d = [1, 2, 3, 4, 5];
// 배열 인덱스에 따른 값을 구할수 있는 함수!메모
// return은 변수명으로 쓰면 안된다!

// 배열 메소드 indexOf
// 배열의 값을 찾아서 위치를 리턴
let return1 = d.indexOf(2);
console.log(return1);

let arr = ["사과", "딸기", "포도"];

let return2 = arr.indexOf("딸기");
console.log(return2);

// 배열 메소드 find 메모
// 검색할때 사용할 함수
// 함수 반환값이 true나오는 함수를 넣어주고

// find라는 함수는 매개변수로 함수를 전달받는다.
let return3 = arr.find((a) => {
  // 배열의 값이 순서대로 들어온다
  // i 매개변수에
  // return 값이 true의 값이 반환되면 해당 아이템을 반환해준다.
  return a === "딸기";
}); 
// true가 나온 첫번째 값을 반환한다.
// 값을 내보내면 함수가 종료된다.
console.log(return3);

// 배열 메소드 findIndex 메모
let return5 = arr.findIndex((a) => {
  return a === "딸기";
});
// 해당배열을 반복시키면서 값을 찾고 그 값의 인덱스를 반환해준다.
console.log(return5);

// 배열 메소드 filter 메모

let arr2 = ["이사과", "김딸기", "이포도"];
let str = "가나다";
// 문자열도 인덱스로 한자한자 접근이 가능하다.
console.log(str[0]);

let return6 = arr2.filter((a) => {
  return a[0] === "이";
});

// filter검색창 같은 알고리즘 구현할 때 사용할 거 같다.

// 원하는 값을 모두 찾아서 반환해준다.
console.log(return6);

// 함수 메소드 map 메모

let return7 = arr2.map((a) => {
  console.log(a);
  // 배열의 형태로 반환값들을 넣어 반환해준다.
  return a[0] === "이";
});

// 반환값 나오면 배열의 길이만큼 채워서 반환

console.log(return7);

// 배열메소드 forEach 메모

// 해당 배열을 반복시켜서 작업해야할 경우 용이하게 사용된다.
arr2.forEach((a) => {
});
// 해당 배열의 길이만큼 반복하면서 값을 뽑아줍니다.
// 해당 값을 바로 사용할 수 있다.


// 배열의 메소드 join =>메모
// join함수는 매개변수로 문자열을 전달해준다.

let asd=arr2.join(';;;')
console.log(asd);

// 배열을 문자열로 변경시켜준다.
// 배열에 들어있는 값들의 구분을 매개변수로 전달한 문자열로 해준다.

// split함수 =>메모
// 문자열을 배열로 변경
// split 함수의 매개변수로 문자열 값을 자를 문자값을 넣어주면 된다.
let str3=asd.split('');
console.log(str3)